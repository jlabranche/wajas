var score = {
    win: 0,
    max_repeat: 15000,
    lose: 0,
},
settings = {};
new_game();
progress_game();

function adjust() {
    new_game();
    $(".right_panels .panel .content .right_panels").html('You won '+score.win+' games, and lost '+score.lose+'!');
    if ((score.win+score.lose) < score.max_repeat) {
        progress_game();
    }
}
function update_confirmed() {
    ;
}
function new_game() {
    $(".game-waw-critters,.game-waw-result,.game-waw-picker").remove();
    $(".game-waw-container").prepend('<div class="game-waw-critters"></div>');
    $(".game-waw-critters").append('<div class="game-waw-result">Turn 0</div>');
    $(".game-waw-critters").append('<div class="game-waw-critter"></div>');
    $(".game-waw-critters").append('<div class="game-waw-critter"></div>');
    $(".game-waw-critters").append('<div class="game-waw-critter"></div>');
    $(".game-waw-critters").append('<div class="game-waw-critter"></div>');
     settings = {
        confirmed: [0,0,0,0],
        previous_color: 0,
        to_find: 4,
        color: {},
        game_id: 2921152,
        code: "[1,1,1,7]",
        cyle_color: 0,
        game_waw: "10363f9a7015f36ba082afc305c8beb7",
    };
}
function progress_game() {
    var i = 0;
    var temp = eval(settings.code);
    $('.game-waw-critter').each(function(){
        $(this).removeClass('game-waw-critter1');
        $(this).removeClass('game-waw-critter2');
        $(this).removeClass('game-waw-critter3');
        $(this).removeClass('game-waw-critter4');
        $(this).removeClass('game-waw-critter5');
        $(this).removeClass('game-waw-critter6');
	$(this).addClass('game-waw-critter'+temp[i]);
        i++;
    });
    $.ajax({
        type: 'POST',
        url:  '/games_mastermind/game_waw.php',
        data: {
            code: settings.code,
            game_id: settings.game_id,
            game_waw: settings.game_waw,
        },
        dataType : 'json',
        success : function(json) {
            $('#userbar-credits').text(json.credits);
            var color_selection_html = '<table>';
            for (var k in settings.color){
                color_selection_html += '<td class="game-waw-picker game-waw-picker'+k+'">'+settings.color[k]+'</div>';
            }
            color_selection_html += '</table>';
            $('#ajax_msg').html(color_selection_html);
            if (json.status === -1) {
                settings.game_id = json.new_game.game_id;
                progress_game();
            }
            if (json.status === 0 || json.status === 2 || json.status === 1) {
                var $found    = json.results[json.tries.length-1][0];
                if ($found === 4) {
                    score.win++;
                    adjust();
                } else if (json.status === 1) {
                    score.lose++;
                    adjust();
                }
            }
            if (json.status === 2) {
                var $found    = json.results[json.tries.length-1][0];
                var $almost   = json.results[json.tries.length-1][1];
                var $total    = json.results[json.tries.length-1][2];
                //$total is based on this iteration, settings.to_find is based on last iteration

                turn = json.tries.length;
                $('.game-waw-result').text('Turn: '+turn);

                var $total_found = 0;
                for (var i = 0; i <= settings.color.length; i++) {
                    $total_found = ($total_found+settings.color[i]);
                }
                if (json.tries.length < 7 && $total_found < 4){//TODO && settings.to_find > 0) {
                    var $color    = json.tries.length+1;
                    var $colorVal = json.tries.length;
                    var $slot = [$color,$color,$color,$color];
                    if ($found > 0) {
                        var $founds_needed = 1;
                        for (var i = 3; i > 0; i--) {
                            if (settings.confirmed[i] === 0) {
                                if ($found >= $founds_needed) {
                                    settings.color[$colorVal] = $found-$founds_needed;
                                }
                                $founds_needed++;
                                break;
                            }
                        } 
                        settings.to_find = $total;
                        if ($found === 3) {
                            if (settings.confirmed[3] === 0) {
                                /*settings.confirmed[0] = settings.previous_color-1;
                                settings.confirmed[1] = settings.previous_color-1;
                                settings.confirmed[2] = settings.previous_color-1;*/
                            }
                            if (settings.confirmed[2] > 0 && settings.confirmed[3] > 0 && $almost === 0) {
                                settings.confirmed[0] = $colorVal;
                            }
                        } else if ($found === 2) {
                            if (settings.confirmed[2] > 0 && settings.confirmed[3] > 0 && $almost === 1) {
                                settings.confirmed[1] = $colorVal;
                            }
                        }
                    }
                    if ($almost > 0) {
                        for (var i = 3; i > 0; i--) {
                            if (settings.confirmed[i] === 0) {
                                settings.confirmed[i] = $colorVal;
                                break;
                            }
                        } 
                    }
                    for (var i = 3; i > 0; i--) {
                        if (settings.confirmed[i] != 0) {
                            $slot[i] = settings.confirmed[i];
                        }
                    }
                    for (var i = 3; i > 0; i--) {
                        if (settings.confirmed[i] === 0) {
                            if (settings.confirmed[0] > 0 && settings.confirmed[1] > 0 && settings.confirmed[2] > 0 && i === 3)  {
                                $slot[3] = $color;
                                $slot[0] = settings.confirmed[0];
                            } else {
                                $slot[i] = 7;
                            }
                            break;
                        }
                    }
                    settings.code = "["+$slot[0]+","+$slot[1]+","+$slot[2]+","+$slot[3]+"]";
                    settings.previous_color = $color;
                    progress_game();
                } else {
                    if ( settings.cyle_color < 20) {// changing it from max of 5 to 20 will make it so you can loose and start over again, it only seems to fail because of 4 of a kind.(Object.keys(settings.color).length+1)) {//max of 4 color so max at 5
                        var $color      = Object.keys(settings.color)[settings.cyle_color];
                        settings.cyle_color++;
                        if (settings.confirmed[2] === 0) {
                            if ($found === 2) {
                                settings.confirmed[2] = settings.previous_color;
                                settings.cyle_color = 0;
                                $color      = Object.keys(settings.color)[settings.cyle_color];
                                settings.code = "["+7+","+$color+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            } else {
                                settings.code = "["+7+","+7+","+$color+","+settings.confirmed[3]+"]";
                            }
                        } else if (settings.confirmed[1] === 0) {
                            if ($found === 3) {
                                console.log(settings.cyle_color);
                                settings.confirmed[1] = settings.previous_color;
                                settings.cyle_color = 0;
                                $color      = Object.keys(settings.color)[settings.cyle_color];
                                settings.code = "["+7+","+settings.confirmed[1]+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            } else {
                                settings.code = "["+7+","+$color+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            }
                        } else if (settings.confirmed[0] === 0) {
                            if ($found === 4) {
                                settings.confirmed[0] = $settings.previous_color;
                                settings.cyle_color = 0;
                                settings.code = "["+settings.confirmed[0]+","+settings.confirmed[1]+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            } else {
                                settings.code = "["+$color+","+settings.confirmed[1]+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            }
                            if ($found === 2) {
                                alert("failure only found 2");
                                return;
                            }
                        } else {
                            if (settings.confirmed[0] === 0) {
                                alert("settings.confirmed[0] has not been set.");
                                return;
                            } else if (settings.confirmed[0] === 6) {
                                settings.code = "["+$color+","+settings.confirmed[1]+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            } else {
                                settings.code = "["+settings.confirmed[0]+","+settings.confirmed[1]+","+settings.confirmed[2]+","+settings.confirmed[3]+"]";
                            }
                            settings.previous_color = $color
                            progress_game();
                            return;
                        }
                        settings.previous_color = $color
                        progress_game();
                        return;
                    } else {
                        var $color      = Object.keys(settings.color)[settings.cyle_color];
                    }
                }
            }
        }
    });
}
